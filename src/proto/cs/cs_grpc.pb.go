// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: cs.proto

package cs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mini_Choice_FullMethodName = "/mini.Mini/Choice"
)

// MiniClient is the client API for Mini service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiniClient interface {
	Choice(ctx context.Context, in *ChoiceBiRequest, opts ...grpc.CallOption) (*ChoiceReply, error)
}

type miniClient struct {
	cc grpc.ClientConnInterface
}

func NewMiniClient(cc grpc.ClientConnInterface) MiniClient {
	return &miniClient{cc}
}

func (c *miniClient) Choice(ctx context.Context, in *ChoiceBiRequest, opts ...grpc.CallOption) (*ChoiceReply, error) {
	out := new(ChoiceReply)
	err := c.cc.Invoke(ctx, Mini_Choice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiniServer is the server API for Mini service.
// All implementations must embed UnimplementedMiniServer
// for forward compatibility
type MiniServer interface {
	Choice(context.Context, *ChoiceBiRequest) (*ChoiceReply, error)
	mustEmbedUnimplementedMiniServer()
}

// UnimplementedMiniServer must be embedded to have forward compatible implementations.
type UnimplementedMiniServer struct {
}

func (UnimplementedMiniServer) Choice(context.Context, *ChoiceBiRequest) (*ChoiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Choice not implemented")
}
func (UnimplementedMiniServer) mustEmbedUnimplementedMiniServer() {}

// UnsafeMiniServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiniServer will
// result in compilation errors.
type UnsafeMiniServer interface {
	mustEmbedUnimplementedMiniServer()
}

func RegisterMiniServer(s grpc.ServiceRegistrar, srv MiniServer) {
	s.RegisterService(&Mini_ServiceDesc, srv)
}

func _Mini_Choice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChoiceBiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniServer).Choice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mini_Choice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniServer).Choice(ctx, req.(*ChoiceBiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mini_ServiceDesc is the grpc.ServiceDesc for Mini service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mini_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mini.Mini",
	HandlerType: (*MiniServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Choice",
			Handler:    _Mini_Choice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs.proto",
}
